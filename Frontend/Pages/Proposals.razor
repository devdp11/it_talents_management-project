@using Frontend.Models
@inject HttpClient httpClient
@using Microsoft.AspNetCore.Components
@using Blazored.LocalStorage
@using System.Text
@using System.Text.Json
@using Newtonsoft.Json
@inject ILocalStorageService localstorage
@using Newtonsoft.Json.Linq;
@using JsonException = System.Text.Json.JsonException
@using JsonSerializer = System.Text.Json.JsonSerializer
@page "/proposals"

<PageTitle>Work Proposals</PageTitle>
<h1>Work Proposals Page</h1>
<style>
    .button {
        margin-top: 20px;
    }
    label {
        margin-top: 10px;
        color: royalblue;
    }
    InputText{
        border-color: royalblue;    
    }
</style>

<div class="text-center">
    <button class="btn btn-primary custom-btn" @onclick="ShowCreateForm">Add Proposals</button>
    <button class="btn btn-primary custom-btn" @onclick="ListAllProposals">List Proposals</button>
</div>

@if (showCreateForm)
{
    <h4>Add Proposals</h4>
    <EditForm Model="@createProposalModel" OnValidSubmit="createProposal" OnInvalidSubmit="HandleInvalidSubmit">
        <div class="form-group">
            <label for="name">Name</label>
            <InputText class="form-control" id="name" @bind-Value="@createProposalModel.Name" />
            <ValidationMessage For="@(() => createProposalModel.Name)" />
        </div>
        
        <div class="form-group">
            <label for="clientid">Client ID</label>
            <InputNumber class="form-control" id="clientid" @bind-Value="@createProposalModel.ClientID"/>
            <ValidationMessage For="@(() => createProposalModel.ClientID)"/>
        </div>
        
        <div class="form-group">
            <label for="talentcategory">Talent Category</label>
            <InputText class="form-control" id="talentcategory" @bind-Value="@createProposalModel.TalentCategory" />
            <ValidationMessage For="@(() => createProposalModel.TalentCategory)" />
        </div>
        
        <div class="form-group">
            <label for="totalhours">Total Hours</label>
            <InputNumber class="form-control" id="totalhours" @bind-Value="@createProposalModel.TotalHours"/>
            <ValidationMessage For="@(() => createProposalModel.TotalHours)"/>
        </div>
        
        <div class="form-group">
            <label for="jobdescription">Job Description</label>
            <InputText class="form-control" id="jobdescription" @bind-Value="@createProposalModel.JobDescription" />
            <ValidationMessage For="@(() => createProposalModel.JobDescription)" />
        </div>
        
        <div class="button">
            <button class="btn btn-primary" type="submit">Create</button>
            <button class="btn btn-danger" @onclick="CancelCreate">Cancel</button>
        </div>
        <div>
            @if (!string.IsNullOrEmpty(createMessage))
            {
                <div class="alert alert-info">@createMessage</div>
            }
        </div>
    </EditForm>
    
}

@if (showSkillList)
{
    <h4>List Proposals</h4>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Client ID</th>
                <th>Talent Category</th>
                <th>Total Hours</th>
                <th>Job Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var jobProposal in jobProposals)
            {
                <tr>
                    <td>@jobProposal.JobProposalID</td>
                    <td>@jobProposal.Name</td>
                    <td>@jobProposal.ClientID</td>
                    <td>@jobProposal.TalentCategory</td>
                    <td>@jobProposal.TotalHours</td>
                    <td>@jobProposal.JobDescription</td>

                    <td>
                        <button class="btn btn-primary" @onclick="() => ShowEditForm(jobProposal)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(jobProposal.JobProposalID)">Delete</button>
                        <button class="btn btn-info" @onclick="() => ShowAddSkillForm(jobProposal)">AddSkill</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showEditForm)
{
    <h4>Edit Profile</h4>

    <EditForm Model="@updateProposalModel" OnValidSubmit="EditProposal">
        <div class="form-group">
            <label for="name">Name</label>
            <InputText class="form-control" id="name" @bind-Value="@updateProposalModel.Name" />
            <ValidationMessage For="@(() => updateProposalModel.Name)" />
        </div>

        <div class="form-group">
            <label for="talentcategory">Talent Category</label>
            <InputText class="form-control" id="talentcategory" @bind-Value="@updateProposalModel.TalentCategory" />
            <ValidationMessage For="@(() => updateProposalModel.TalentCategory)" />
        </div>
        
        <div class="form-group">
            <label for="totalhours">Total Hours</label>
            <InputNumber class="form-control" id="totalhours" @bind-Value="@updateProposalModel.TotalHours"/>
            <ValidationMessage For="@(() => updateProposalModel.TotalHours)"/>
        </div>
                
        <div class="form-group">
            <label for="jobdescription">Job Description</label>
            <InputText class="form-control" id="jobdescription" @bind-Value="@updateProposalModel.JobDescription" />
            <ValidationMessage For="@(() => updateProposalModel.JobDescription)" />
        </div>
        

        <div class="button">
            <button class="btn btn-primary" type="submit">Update</button>
            <button class="btn btn-danger" @onclick="CancelEdit">Cancel</button>
        </div>

        <div>
            @if (!string.IsNullOrEmpty(editMessage))
            {
                <div class="alert alert-info">@editMessage</div>
            }
        </div>
    </EditForm>
}

@if (showAddSkillForm)
{
    <h4>Add Professional Skill</h4>

    <EditForm Model="@newSkill" OnValidSubmit="SaveSkill">
        <div class="form-group">
            <label for="skill">Skill</label>
            @if (allSkills == null)
            {
                <p>Loading skills...</p>
            }
            else
            {
                <InputSelect class="form-control" id="skill" @bind-Value="@newSkill.SkillID">
                    @foreach (var skill in allSkills)
                    {
                        <option value="@skill.SkillID">@skill.Name</option>
                    }
                </InputSelect>
            }
        </div>

        <div class="form-group">
            <label for="yearsExperience">Years of Experience</label>
            <InputNumber class="form-control" id="yearsExperience" @bind-Value="@newSkill.YearsExperience" />
        </div>

        <button class="btn btn-primary" type="submit">Add Skill</button>
        <button class="btn btn-secondary" @onclick="() => showAddSkillForm = false">Cancel</button>
    </EditForm>
}

@if (showDeleteConfirmation)
{
    <h4>Delete Skill</h4>
    <p>Are you sure you want to delete this skill?</p>
    <button class="btn btn-danger" @onclick="DeleteProposal">Yes, delete it</button>
    <button class="btn btn-secondary" @onclick="ShowList">No, go back</button>
}

@code {
    private string editMessage;
    private string Message = "";
    private List<JobProposalModel> jobProposals;
    private JobProposalModel jobProposal = new JobProposalModel();
    private int editProposalsId;
    private int deleteProposalsId;
    private string createMessage;
    bool showCreateForm = false;
    bool showEditForm = false;
    bool showDeleteConfirmation = false;
    private bool showSkillList = false;
    private CreateWorkProposalModel createProposalModel = new CreateWorkProposalModel();
    private UpdateProposalModel updateProposalModel = new UpdateProposalModel();
    private List<SkillModel> allSkills;
    private AddProposalSkillModel newSkill = new AddProposalSkillModel();
    private bool showAddSkillForm = false;
    private int _userID;
    
    private async Task ListProposals()
    {
        jobProposals = await httpClient.GetFromJsonAsync<List<JobProposalModel>>("http://localhost:5052/api/Proposals");
    }
    
    private async Task ListAllProposals()
    {
        
        var response = await httpClient.GetAsync("http://localhost:5052/api/Proposals");

        if (response.IsSuccessStatusCode)
        {
            var responseString = await response.Content.ReadAsStringAsync();
            try
            {
            // Iniciar as configurações do Json com PreserveReferencesHandling
                var settings = new JsonSerializerSettings
                {
                    PreserveReferencesHandling = PreserveReferencesHandling.Objects
                };

            // Deserializar o JSON com as configurações
                var proposalsArray = JsonConvert.DeserializeObject<List<JobProposalModel>>(responseString, settings);

            // Limpa os dados
                jobProposals = proposalsArray
                    .Where(p => p != null)
                    .Select(p => new JobProposalModel
                    {
                        JobProposalID = p.JobProposalID,
                        UserID = p.UserID,
                        Name = p.Name,
                        ClientID = p.ClientID,
                        TalentCategory = p.TalentCategory,
                        TotalHours = p.TotalHours,
                        JobDescription = p.JobDescription
                    }).ToList();
                Console.WriteLine(jobProposals);

                showSkillList = true;
                showCreateForm = false;
                showEditForm = false;
                showDeleteConfirmation = false;
            }
            catch (JsonException e)
            {
                Console.WriteLine("Failed to deserialize response: " + e.Message);
                Console.WriteLine("Response was: " + responseString);
            }
        }
        else
        {
            jobProposals = new List<JobProposalModel>();
            showSkillList = false;
            showCreateForm = false; 
            showEditForm = false;
            showDeleteConfirmation = false;
        }
    }
    
    private async Task createProposal()
    {
    // Pega o userID do LocalStorage
        _userID = await localstorage.GetItemAsync<int>("userID");

    // Atribui o userID ao modelo
        createProposalModel.UserID = _userID;

        var json = JsonSerializer.Serialize(createProposalModel);
        var response = await httpClient.PostAsync("http://localhost:5052/api/Proposals", new StringContent(json, Encoding.UTF8, "application/json"));
        if (response.IsSuccessStatusCode)
        {
            createMessage = "Proposal created with success";
            createProposalModel = new CreateWorkProposalModel();
            showCreateForm = false;
            await ListProposals();
        }
        else
        {
            createMessage = "Error creating talent profile";
        }
    }

    private void ShowCreateForm()
    {
        createProposalModel = new CreateWorkProposalModel();
        showCreateForm = true;
        showEditForm = false;
        showDeleteConfirmation = false;
        showSkillList = false;
    }
    
    private void CancelCreate()
    {
        showCreateForm = false;
        createProposalModel = new CreateWorkProposalModel();
    }
    
    private void FillModel(JobProposalModel proposal)
    {
        editProposalsId = proposal.JobProposalID; // Guarda o ID do profissional a ser editado
    
        updateProposalModel.Name = proposal.Name;
        updateProposalModel.TalentCategory = proposal.TalentCategory;
        updateProposalModel.TotalHours = proposal.TotalHours;
        updateProposalModel.JobDescription = proposal.JobDescription;

        if (proposal.JobproposalSkill != null)
        {
            updateProposalModel.ProposalSkills = proposal.JobproposalSkill.Select(ps => new AddProposalSkillModel
            {
                JobProposalID = ps.JobProposalID,
                SkillID = ps.SkillID,
                YearsExperience = ps.MinYearsExperience
            }).ToList();
        }
    }

    private async Task EditProposal()
    {
        var response = await httpClient.PutAsJsonAsync($"http://localhost:5052/api/Proposals/{editProposalsId}", updateProposalModel);
    
        if (response.IsSuccessStatusCode)
        {
            editMessage = "Proposals updated successfully";
            jobProposal = new JobProposalModel();
            showEditForm = false;
            await ListProposals();
        }
        else
        {
            editMessage = "Error updating proposals";
        }
    }

    private void ShowEditForm(JobProposalModel proposalToEdit)
    {
        FillModel(proposalToEdit);
        editProposalsId = proposalToEdit.JobProposalID;
        showCreateForm = false;
        showEditForm = true;
        showDeleteConfirmation = false;
        showSkillList = false;
    }
    

    private async Task AddSkill()
    {
        if (editProposalsId == 0)
        {
            return;
        }
        if (allSkills == null)
        {
            Console.WriteLine("allSkills is null");
            return;
        }
        if (newSkill == null)
        {
            Console.WriteLine("newSkill is null");
            return;
        }
        Console.WriteLine(allSkills);

        newSkill.JobProposalID = editProposalsId;

        var response = await httpClient.PostAsJsonAsync("http://localhost:5052/api/ProposalsSkills", newSkill);

        if (response.IsSuccessStatusCode)
        {
            newSkill = new AddProposalSkillModel();
            await ListProposals();
        }
        else
        {
        }
    }
    private async Task UpdateSkills()
    {
        Console.WriteLine("Updating skills...");
        var response = await httpClient.GetAsync("http://localhost:5052/api/Skills");
        Console.WriteLine("UpdateSkills() response status code: " + response.StatusCode);

        if (response.IsSuccessStatusCode)
        {
            string responseString = await response.Content.ReadAsStringAsync();
            JsonDocument doc = JsonDocument.Parse(responseString);
            JsonElement root = doc.RootElement;
            JsonElement values;

            if (root.TryGetProperty("$values", out values))
            {
                allSkills = JsonSerializer.Deserialize<List<SkillModel>>(values.GetRawText());
                Console.WriteLine($"Skills count: {allSkills?.Count}");
                foreach (var skill in allSkills)
                {
                    Console.WriteLine($"Skill ID: {skill.SkillID}, Name: '{skill.Name}'");
                }
            }
            else
            {
                Console.WriteLine("Failed to fetch skills: $values property not found in JSON");
            }
        }
        else
        {
            Console.WriteLine($"Failed to fetch skills. Status code: {response.StatusCode}");
        }
    }
    
    private async Task SaveSkill()
    {
        var response = await httpClient.PostAsJsonAsync($"http://localhost:5052/api/Proposals/addskill", newSkill);

        if (response.IsSuccessStatusCode)
        {
            newSkill = new AddProposalSkillModel();
            showAddSkillForm = false;

            await ListProposals();
            jobProposal.JobproposalSkill = await httpClient.GetFromJsonAsync<List<JobProposalSkillModel>>($"http://localhost:5052/api/Proposals/{editProposalsId}/Skills");
            // mostra as skills que existem
            Console.WriteLine("All Skills Count: " + allSkills.Count);
            foreach (var skill in allSkills)
            {
                Console.WriteLine("Skill: " + skill.Name);
            }
        }
        else
        {
        }
    }
    
    private void ShowAddSkillForm(JobProposalModel proposalToEdit)
    {
        editProposalsId = proposalToEdit.JobProposalID;
        newSkill = new AddProposalSkillModel { JobProposalID = proposalToEdit.JobProposalID };
        showAddSkillForm = true;
        showSkillList = false;
        UpdateSkills();
    }


    private async Task DeleteProposal()
    {
        var response = await httpClient.DeleteAsync($"http://localhost:5052/api/Proposals/{deleteProposalsId}");

        if (response.IsSuccessStatusCode)
        {
            Message = "Work Proposals deleted successfully";
            await ListAllProposals();
            ShowList();
        }
        else
        {
            Message = "Error deleting proposal";
        }
    }

    private void ShowDeleteConfirmation(int idToDelete)
    {
        deleteProposalsId = idToDelete;
        showDeleteConfirmation = true;
        showCreateForm = false;
        showEditForm = false;
        showSkillList = false;
    }

    private void ShowList()
    {
        showDeleteConfirmation = false;
        showCreateForm = false;
        showEditForm = false;
        showSkillList = true;
    }
    
    private void CancelEdit()
    {
        showEditForm = false;
        jobProposal = new JobProposalModel();
    }
    private void HandleInvalidSubmit(EditContext context)
    {
        Console.WriteLine("Failed to submit form");
    }
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Proposals component initialized.");
    
        var responseString = await httpClient.GetStringAsync("http://localhost:5052/api/Skills");
        allSkills = JsonConvert.DeserializeObject<List<SkillModel>>(responseString);
    
        Console.WriteLine("All Skills Count: " + allSkills.Count);
        await ListProposals();
        await UpdateSkills();
        foreach (var skill in allSkills)
        {
            Console.WriteLine("Skill: " + skill.Name);
        }
    }
}